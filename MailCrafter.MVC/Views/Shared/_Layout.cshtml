<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/site.css" />

    <link rel="stylesheet" href="~/css/manage-email-accounts.css" />

    <link rel="stylesheet" href="~/lib/font-awesome/css/all.min.css" />

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <script src="https://cdn.ckeditor.com/ckeditor5/40.1.0/classic/ckeditor.js"></script>
    @await RenderSectionAsync("Styles", required: false)

</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <nav class="sidebar">
            <div class="logo-container">
                <img src="~/images/logo.png" alt="MailCrafter" class="logo" />
            </div>

            <div class="nav-items">
                <a href="/" class="nav-item">
                    <i class="fas fa-home"></i>
                    <span>Dashboard</span>
                </a>
                <a href="/jobs" class="nav-item">
                    <i class="fas fa-tasks"></i>
                    <span>Jobs</span>
                </a>
                <a href="/insights" class="nav-item">
                    <i class="fas fa-chart-line"></i>
                    <span>Insights</span>
                </a>
                <div class="nav-group">
                    <a href="#" class="nav-item with-arrow">
                        <i class="fas fa-cog"></i>
                        <span>Management</span>
                    </a>
                    <div class="subnav">
                        <a href="/management/email-accounts" class="nav-item">
                            <i class="fas fa-envelope"></i>
                            <span>Email Accounts</span>
                        </a>
                        <a href="/management/email-templates" class="nav-item">
                            <i class="fas fa-file-alt"></i>
                            <span>Email Templates</span>
                        </a>
                        <a href="/management/groups" class="nav-item">
                            <i class="fas fa-users"></i>
                            <span>Groups</span>
                        </a>
                    </div>
                </div>
            </div>

            <!-- Profile and Logout Section -->
            <div class="sidebar-footer">
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <div class="profile-section">
                        <i class="fas fa-user-circle"></i>
                        <span class="username">@User.Identity?.Name</span>
                        <button class="btn-edit-profile" data-bs-toggle="modal" data-bs-target="#editProfileModal">
                            <i class="fas fa-edit"></i>
                        </button>
                    </div>
                    <form id="logout-form" style="display:none;">
                        <input name="__RequestVerificationToken" type="hidden" value="@Antiforgery.GetTokens(Context).RequestToken" />
                    </form>
                    <button type="button" class="nav-item logout-item" onclick="logout()">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Logout</span>
                    </button>
                }
                else
                {
                    <div class="auth-buttons">
                        <a href="/login" class="nav-item">
                            <i class="fas fa-sign-in-alt"></i>
                            <span>Login</span>
                        </a>
                        <a href="/register" class="nav-item">
                            <i class="fas fa-user-plus"></i>
                            <span>Register</span>
                        </a>
                    </div>
                }
            </div>
        </nav>

        <!-- Main Content -->
        <main class="main-content">
            <div class="content-wrapper">
                <div id="root"></div>
                @RenderBody()
            </div>
        </main>
    </div>

    

    <!-- Gemini AI Chat Modal -->
    <div class="modal fade" id="aiChatModal" tabindex="-1" aria-labelledby="aiChatModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" id="aiChatBox">
                <div class="modal-header text-white fw-bold" id="aiChatModalLabel" style="background-color : #FF6B00">
                    <h5 class="modal-title mb-0">
                        <i class="fas fa-robot me-2"></i>AI ChatBox
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" style="background: #f9f9f9;">
                    <div id="chatMessages" style="height: 260px; overflow-y: auto; background: #fff; border-radius: 6px; border: 1px solid #eee; padding: 1rem; margin-bottom: 1rem; font-size: 1rem;"></div>
                    <div class="input-group">
                        <input type="text" id="chatInput" class="form-control" placeholder="Enter your template..." autocomplete="off" />
                        <button class="btn btn-primary" id="sendChatBtn"><i class="fas fa-paper-plane"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Profile Modal -->
    <div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-white">
                    <h5 class="modal-title" id="editProfileModalLabel">
                        <i class="fas fa-user-edit me-2"></i>Edit Profile
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editProfileForm">
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <input type="text" class="form-control" id="username" name="username" value="@User.Identity?.Name">
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email"
                                   value="@User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Email)?.Value">
                        </div>
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Current Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="currentPassword" name="currentPassword">
                                <button class="btn btn-outline-secondary" type="button" id="toggleCurrentPassword">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                            <div class="form-text">Required only if you want to change your password</div>
                        </div>
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="newPassword" name="newPassword">
                                <button class="btn btn-outline-secondary" type="button" id="toggleNewPassword">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                            <div class="form-text">Leave blank if you don't want to change your password</div>
                        </div>
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm New Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword">
                                <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                            <div class="form-text">Must match the new password</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer bg-white">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveProfileChanges">
                        <span id="saveProfileSpinner" class="spinner-border spinner-border-sm d-none me-1"></span>
                        Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Make Management dropdown open by default
            const managementNavGroup = document.querySelector('.nav-group');
            if (managementNavGroup) {
                managementNavGroup.classList.add('active');
            }

            // Handle Management dropdown
            const managementLink = document.querySelector('.nav-item.with-arrow');
            if (managementLink) {
                managementLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    const navGroup = this.closest('.nav-group');
                    navGroup.classList.toggle('active');
                });
            }

            // Set active state for current page
            const currentPath = window.location.pathname;
            const navItems = document.querySelectorAll('.nav-item');
            navItems.forEach(item => {
                const href = item.getAttribute('href');
                if (href && currentPath.startsWith(href) && href !== '/') {
                    item.classList.add('active');
                    // If it's in a subnav, activate the parent nav-group
                    const navGroup = item.closest('.nav-group');
                    if (navGroup) {
                        navGroup.classList.add('active');
                    }
                }
            });
        });

        // AI Chat functionality - available globally
        $(document).ready(function() {
            // Modal open logic for AI chat
            $("#openAiChatModalBtn").on("click", function() {
                $("#aiChatModal").modal("show");
            });
        });

        // Gemini AI Chat Box logic
        (function() {
            const API_KEY = "AIzaSyCg44cvQxaUrOdPZ49KqR2Li7ffIpATdnQ";
            const API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + API_KEY;
            
            function initializeAIChat() {
                const chatMessages = document.getElementById("chatMessages");
                const chatInput = document.getElementById("chatInput");
                const sendBtn = document.getElementById("sendChatBtn");
                
                if (!chatMessages || !chatInput || !sendBtn) return;
                
                let isWaiting = false;

                function appendMessage(text, sender) {
                    // Replace \n with <br> for AI messages
                    let html = sender === "ai" ? text.replace(/\n/g, "<br>") : text;
                    const msgDiv = document.createElement("div");
                    msgDiv.className = sender === "user" ? "text-end mb-2" : "text-start mb-2";
                    msgDiv.innerHTML = `<span class='badge ${sender === "user" ? "text-white" : "bg-light text-dark"}' style='font-size:1em; background-color : #FF6B00;'>${html}</span>`;
                    chatMessages.appendChild(msgDiv);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }

                function setWaiting(state) {
                    isWaiting = state;
                    sendBtn.disabled = state;
                    chatInput.disabled = state;
                    if(state) appendMessage("Answering...", "ai-wait");
                }

                function removeWaiting() {
                    // Remove last waiting message
                    const nodes = chatMessages.querySelectorAll(".text-start, .text-end");
                    if (nodes.length > 0 && nodes[nodes.length - 1].textContent === "Answering...") {
                        chatMessages.removeChild(nodes[nodes.length-1]);
                    }
                }

                async function sendMessage() {
                    const ViewText = chatInput.value.trim();
                    const text = 'generate email content with richtext format with placeholders form like {{placeholder}} with ideal ' + chatInput.value.trim();
                    if (!text || isWaiting) return;
                    appendMessage(ViewText, "user");
                    chatInput.value = "";
                    setWaiting(true);
                    try {
                        const res = await fetch(API_URL, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                contents: [{ parts: [{ text }] }]
                            })
                        });
                        const data = await res.json();
                        removeWaiting();
                        if (data && data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {
                            const aiText = data.candidates[0].content.parts.map(p => p.text).join("\n");
                            appendMessage(aiText, "ai");
                        } else {
                            appendMessage("AI không trả lời được. Vui lòng thử lại.", "ai");
                        }
                    } catch (e) {
                        removeWaiting();
                        appendMessage("Lỗi khi gọi AI: " + e.message, "ai");
                    }
                    setWaiting(false);
                }

                sendBtn.addEventListener("click", sendMessage);
                chatInput.addEventListener("keydown", function(e) {
                    if (e.key === "Enter") sendMessage();
                });
            }

            // Initialize AI chat when DOM is ready
            $(document).ready(function() {
                initializeAIChat();
            });
        })();
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>



