@model List<MailCrafter.Domain.BotPackage>
@{
    ViewData["Title"] = "Bot Packages";
}

<div class="page-header d-flex justify-content-between align-items-center mb-4">
    <h1>Bot Packages</h1>
    <a href="@Url.Action("Create")" class="btn btn-primary">
        <i class="fas fa-plus"></i> Upload New Package
    </a>
</div>

<div class="packages-container">
    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info">
            <p>No bot packages found. Upload your first package to deploy to robots.</p>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Version</th>
                                <th>Description</th>
                                <th>File Size</th>
                                <th>Uploaded At</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var package in Model)
                            {
                                <tr>
                                    <td>@package.Name</td>
                                    <td>@package.Version</td>
                                    <td>@(string.IsNullOrEmpty(package.Description) ? "-" : package.Description)</td>
                                    <td>@FormatFileSize(package.FileSize)</td>
                                    <td>@package.UploadedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        @if (package.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <a class="btn btn-sm btn-outline-info" href="@Url.Action("Details", new { id = package.ID })">
                                                <i class="fas fa-info-circle"></i> Details
                                            </a>
                                            @if (package.IsActive)
                                            {
                                                <a class="btn btn-sm btn-outline-primary" href="@Url.Action("Deploy", new { id = package.ID })">
                                                    <i class="fas fa-robot"></i> Deploy
                                                </a>
                                            }
                                            <button class="btn btn-sm btn-outline-danger delete-package"
                                                    data-package-id="@package.ID"
                                                    data-package-name="@package.Name">
                                                <i class="fas fa-trash"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- Delete Package Confirmation Modal -->
<div class="modal fade" id="deletePackageModal" tabindex="-1" role="dialog" aria-labelledby="deletePackageModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deletePackageModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the package "<span id="deletePackageName"></span>"?</p>
                <p>This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <span class="spinner-border spinner-border-sm d-none" id="deleteSpinner" role="status" aria-hidden="true"></span>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Delete package button
            document.querySelectorAll('.delete-package').forEach(button => {
                button.addEventListener('click', function() {
                    const packageId = this.getAttribute('data-package-id');
                    const packageName = this.getAttribute('data-package-name');

                    document.getElementById('deletePackageName').textContent = packageName;
                    const confirmBtn = document.getElementById('confirmDeleteBtn');
                    confirmBtn.setAttribute('data-package-id', packageId);

                    const modal = new bootstrap.Modal(document.getElementById('deletePackageModal'));
                    modal.show();
                });
            });

            // Confirm delete button
            document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
                const packageId = this.getAttribute('data-package-id');
                const spinner = document.getElementById('deleteSpinner');

                // Show spinner
                this.disabled = true;
                spinner.classList.remove('d-none');

                // Send delete request
                fetch(`/api/botpackages/${packageId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to delete package');
                    }
                    return response.json();
                })
                .then(() => {
                    // Reload page on success
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting package: ' + error.message);

                    // Hide spinner
                    this.disabled = false;
                    spinner.classList.add('d-none');
                });
            });
        });

        // Helper function to format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
    </script>
}

@functions {
    private string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "0 Bytes";
        string[] sizes = { "Bytes", "KB", "MB", "GB" };
        int k = 1024;
        int i = (int)Math.Floor(Math.Log(bytes) / Math.Log(k));
        return String.Format("{0:0.##} {1}", bytes / Math.Pow(k, i), sizes[i]);
    }
}
