@model MailCrafter.Domain.CustomGroupEntity

@{
    ViewData["Title"] = "Add Group";
}

<div class="container py-5">
    <div class="card shadow-sm">
        <div class="card-header bg-white py-3">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <i class="fas fa-users text-primary me-2"></i>
                    <h2 class="h4 text-primary mb-0">Add New Group</h2>
                </div>
                <a asp-action="ManageGroups" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Back to Groups
                </a>
            </div>
        </div>
        <div class="card-body p-4">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
                </div>
            }

            <form id="addGroupForm" method="post" action="@Url.Action("AddGroup", "CustomGroup")">
                <div class="mb-4">
                    <label for="GroupName" class="form-label">
                        <i class="fas fa-tag text-primary me-2"></i>Group Name
                    </label>
                    <input type="text" class="form-control form-control-lg" id="GroupName" name="GroupName" 
                           placeholder="Enter group name" required />
                </div>

                <div class="mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <label class="form-label mb-0">
                            <i class="fas fa-list text-primary me-2"></i>Custom Fields
                        </label>
                        <div class="btn-group">
                            <button type="button" class="btn btn-outline-primary" onclick="addCustomField()">
                                <i class="fas fa-plus me-2"></i>Add Field
                            </button>
                            <button type="button" class="btn btn-outline-success" onclick="showBulkEntryModal()">
                                <i class="fas fa-table me-2"></i>Add by CSV
                            </button>
                            <button type="button" class="btn btn-outline-info" onclick="showExcelUploadModal()">
                                <i class="fas fa-file-excel me-2"></i>Import Excel
                            </button>
                        </div>
                    </div>
                    <div id="customFieldsContainer"></div>
                </div>

                <input type="hidden" id="fieldNames" name="fieldNames" />
                <input type="hidden" id="fieldValues" name="fieldValues" />
                <input type="hidden" id="emails" name="emails" />

                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Group
                    </button>
                    <a asp-action="ManageGroups" class="btn btn-outline-secondary">
                        <i class="fas fa-times me-2"></i>Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Bulk Entry Modal -->
<div class="modal fade" id="bulkEntryModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add by CSV</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Enter data in CSV format (one row per recipient)</label>
                    <textarea class="form-control" id="bulkEntryText" rows="10" 
                              placeholder="Name,Jane Doe,john@example.com&#10;Name,John Doe,john@example.com&#10;StudentId,DE180002,jane@example.com"></textarea>
                </div>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Format: FieldName,FieldValue,Email (one row per recipient)
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="processBulkEntry()">Add Recipients</button>
            </div>
        </div>
    </div>
</div>

<!-- Excel Upload Modal -->
<div class="modal fade" id="excelUploadModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Import from Excel</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Upload Excel File</label>
                    <input type="file" class="form-control" id="excelFile" accept=".xlsx,.xls" />
                </div>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Excel file should have columns in order: FieldName, FieldValue, Email
                </div>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Note: First row should be headers. Data should start from second row.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="processExcelFile()">Import Data</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .custom-field-set {
            background-color: #f8f9fa;
            border-radius: 0.375rem;
            transition: all 0.2s ease-in-out;
            margin-bottom: 1rem;
        }

        .custom-field-set:hover {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        .form-control:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

        .btn {
            padding: 0.5rem 1rem;
        }

        .btn i {
            width: 1rem;
            text-align: center;
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        function addCustomField() {
            const container = document.getElementById('customFieldsContainer');
            const fieldSet = document.createElement('div');
            fieldSet.className = 'custom-field-set p-3';
            fieldSet.innerHTML = `
                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label">Field Name</label>
                        <input type="text" class="form-control field-key" name="fieldNames[]" 
                               placeholder="e.g., Department" required />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Field Value</label>
                        <input type="text" class="form-control field-value" name="fieldValues[]" 
                               placeholder="e.g., IT" required />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control field-email" name="emails[]" 
                               placeholder="e.g., user@example.com" required />
                    </div>
                    <div class="col-md-1 d-flex align-items-end">
                        <button type="button" class="btn btn-outline-danger w-100" onclick="removeField(this)">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            `;
            container.appendChild(fieldSet);
        }

        function removeField(button) {
            button.closest('.custom-field-set').remove();
        }

        function showBulkEntryModal() {
            const modal = new bootstrap.Modal(document.getElementById('bulkEntryModal'));
            modal.show();
        }

        function processBulkEntry() {
            const bulkText = document.getElementById('bulkEntryText').value.trim();
            if (!bulkText) return;

            const lines = bulkText.split('\n');
            const container = document.getElementById('customFieldsContainer');
            
            // Clear existing fields
            container.innerHTML = '';

            lines.forEach(line => {
                const [fieldName, fieldValue, email] = line.split(',').map(s => s.trim());
                if (fieldName && email && fieldValue) {
                    const fieldSet = document.createElement('div');
                    fieldSet.className = 'custom-field-set p-3';
                    fieldSet.innerHTML = `
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label">Field Name</label>
                                <input type="text" class="form-control field-key" name="fieldNames[]" 
                                       value="${fieldName}" required />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Field Value</label>
                                <input type="text" class="form-control field-value" name="fieldValues[]" 
                                       value="${fieldValue}" required />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control field-email" name="emails[]" 
                                       value="${email}" required />
                            </div>
                            <div class="col-md-1 d-flex align-items-end">
                                <button type="button" class="btn btn-outline-danger w-100" onclick="removeField(this)">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    `;
                    container.appendChild(fieldSet);
                }
            });

            // Close the modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('bulkEntryModal'));
            modal.hide();
        }

        function showExcelUploadModal() {
            const modal = new bootstrap.Modal(document.getElementById('excelUploadModal'));
            modal.show();
        }

        function processExcelFile() {
            const fileInput = document.getElementById('excelFile');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('Please select an Excel file');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                    const jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });

                    // Skip header row and process data
                    const container = document.getElementById('customFieldsContainer');
                    container.innerHTML = ''; // Clear existing fields

                    for (let i = 1; i < jsonData.length; i++) {
                        const row = jsonData[i];
                        if (row.length >= 3) {
                            const [fieldName, fieldValue, email] = row.map(s => String(s).trim());
                            if (fieldName && fieldValue && email) {
                                const fieldSet = document.createElement('div');
                                fieldSet.className = 'custom-field-set p-3';
                                fieldSet.innerHTML = `
                                    <div class="row g-3">
                                        <div class="col-md-4">
                                            <label class="form-label">Field Name</label>
                                            <input type="text" class="form-control field-key" name="fieldNames[]" 
                                                   value="${fieldName}" required />
                                        </div>
                                        <div class="col-md-4">
                                            <label class="form-label">Field Value</label>
                                            <input type="text" class="form-control field-value" name="fieldValues[]" 
                                                   value="${fieldValue}" required />
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label">Email</label>
                                            <input type="email" class="form-control field-email" name="emails[]" 
                                                   value="${email}" required />
                                        </div>
                                        <div class="col-md-1 d-flex align-items-end">
                                            <button type="button" class="btn btn-outline-danger w-100" onclick="removeField(this)">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                `;
                                container.appendChild(fieldSet);
                            }
                        }
                    }

                    // Close the modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('excelUploadModal'));
                    modal.hide();
                } catch (error) {
                    alert('Error processing Excel file: ' + error.message);
                }
            };
            reader.readAsArrayBuffer(file);
        }

        document.getElementById('addGroupForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const fieldNames = [];
            const fieldValues = [];
            const emails = [];

            document.querySelectorAll('input[name="fieldNames[]"]').forEach((input) => {
                fieldNames.push(input.value);
            });

            document.querySelectorAll('input[name="fieldValues[]"]').forEach((input) => {
                fieldValues.push(input.value);
            });

            document.querySelectorAll('input[name="emails[]"]').forEach((input) => {
                emails.push(input.value);
            });

            const groupName = document.getElementById('GroupName').value;

            if (!groupName || fieldNames.length === 0 || fieldValues.length === 0 || emails.length === 0) {
                alert('Please fill in the group name and add at least one custom field.');
                return;
            }

            document.getElementById('fieldNames').value = JSON.stringify(fieldNames);
            document.getElementById('fieldValues').value = JSON.stringify(fieldValues);
            document.getElementById('emails').value = JSON.stringify(emails);

            this.submit();
        });

        // Add first field set on page load
        document.addEventListener('DOMContentLoaded', function() {
            addCustomField();
        });
    </script>
}